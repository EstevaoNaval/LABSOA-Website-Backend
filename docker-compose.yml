services:
  # Serviço do Django (web)
  django-api:
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - .:/app
      - ./data:/app/data
      - ./django-api-logs:/app/logs
      - media:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    networks:
      - bridge_network
    depends_on:
      - db
      - rabbitmq
      - redis

  django_worker:
    build:
      context: . # Usar o Dockerfile do pdf2chemicals
      dockerfile: Dockerfile_Worker
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "4G"
    entrypoint: /app/docker-django-worker-entrypoint.sh
    volumes:
      - .:/app # Montar o código do Django e o app pdf_processor como volume
      - ./data:/app/data
      - media:/app/media
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    networks:
      - bridge_network
    depends_on:
      - rabbitmq
    logging:
      driver: "json-file" # Default logging driver
      options:
        max-size: "10m" # Rotate logs after they reach 10 MB
        max-file: "3" # Keep a maximum of 3 log files

  # Serviço Celery Worker para PDF (com acesso ao Django e ao pdf_processor)
  pdf2chemicals_worker:
    build:
      context: . # Usar o Dockerfile do pdf2chemicals
      dockerfile: Dockerfile_Worker
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "4G"
    networks:
      - bridge_network
    extra_hosts:
      - ${TORQUE_SERVER}:${TORQUE_SERVER_HOST}
    entrypoint: /app/docker-pdf2chemicals-worker-entrypoint.sh
    volumes:
      - .:/app # Montar o código do Django e o app pdf_processor como volume
      - ./data:/app/data
      - media:/app/media
      - ${HOST_USER_LIST}:${HOST_USER_LIST}:ro
      - ${HOST_GROUP_LIST}:${HOST_GROUP_LIST}:ro
      - ${TORQUE_HOME}:${TORQUE_HOME}:ro
      - ${TORQUE_ROOT_DIR}/server_name:${TORQUE_ROOT_DIR}/server_name:ro
      - ${TORQUE_ROOT_DIR}/mom_priv/config:${TORQUE_ROOT_DIR}/mom_priv/config:ro
      - ${TORQUE_ROOT_DIR}/server_priv/nodes:${TORQUE_ROOT_DIR}/server_priv/nodes:ro
      - ${TORQUE_ROOT_DIR}:${TORQUE_ROOT_DIR}:rw
    environment:
      - TORQUE_ROOT_DIR=${TORQUE_ROOT_DIR}
      - TORQUE_HOME=${TORQUE_HOME}
      - TORQUE_SERVER=${TORQUE_SERVER}
      - TORQUE_USER=${TORQUE_USER}
      - TORQUE_USER_PASS=${TORQUE_USER_PASS}
      - TORQUE_QUEUE_GROUP=${TORQUE_QUEUE_GROUP}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - PATH=${TORQUE_HOME}/bin:${TORQUE_HOME}/sbin:$PATH
      - LD_LIBRARY_PATH=${TORQUE_HOME}/lib:$LD_LIBRARY_PATH
    depends_on:
      - rabbitmq
    logging:
      driver: "json-file" # Default logging driver
      options:
        max-size: "10m" # Rotate logs after they reach 10 MB
        max-file: "3" # Keep a maximum of 3 log files

  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2G"
    networks:
      - bridge_network
    environment:
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_DB: ${DATABASE_NAME}
    command: >
      postgres -c port=5477
    ports:
      - "5477:5477"
    restart: unless-stopped

  redis:
    image: redis:7.2.4-alpine
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "2G"
    networks:
      - bridge_network
    command: >
      redis-server --appendonly yes --requirepass "$REDIS_PASSWORD"
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    restart: unless-stopped

  # Serviço RabbitMQ (broker de mensagens)
  rabbitmq:
    image: rabbitmq:4-management-alpine
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1G"
    networks:
      - bridge_network
    environment:
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbit consumer_timeout 31622400000"
    ports:
      - "5672:5672" # Porta padrão do RabbitMQ
      - "15672:15672" # Porta para a interface de administração do RabbitMQ
    restart: unless-stopped

  clam_container_01:
    container_name: clam_container_01
    image: clamav/clamav:stable_base
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "3G"
    networks:
      - bridge_network
    ports:
      - "3310:3310"
      - "7357:7357"
    volumes:
      - clamav-data:/var/lib/clamav
      - clamav-logs:/var/log/clamav
    restart: unless-stopped

networks:
  bridge_network:
    driver: bridge

volumes:
  redis-data:
  media:
  clamav-data:
  clamav-logs:
  django-api-logs:
